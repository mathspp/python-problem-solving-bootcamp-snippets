from functools import reduce

FOLD_LINE_PREFIX = "fold along "

def fold_points(points, fold):  # <- Accepts pointS (plural) and the whole fold.
    coord, value = fold
    if coord == "x":
        return {
            (min(x, 2 * int(value) - x), y)
            for x, y in points
        }
    elif coord == "y":
        return {
            (x, min(y, 2 * int(value) - y))
            for x, y in points
        }

with open(INPUT_FILE, "r") as f:
    data = f.read()

# Split point data from fold data.
point_data, fold_data = data.split("\n\n")
points = [tuple(map(int, point.split(","))) for point in point_data.splitlines()]
# Parse all folds now:
folds = [
    fold.removeprefix(FOLD_LINE_PREFIX).split("=")
    for fold in fold_data.splitlines()
]

folded = reduce(fold_points, folds, points)

# Create a "canvas" to paint the final result on.
width = 1 + max(x for x, _ in folded)
height = 1 + max(y for _, y in folded)
canvas = [[" "] * 2 * width for _ in range(height)]
for x, y in folded:
    canvas[y][2 * x] = "\u2588"
    canvas[y][2 * x + 1] = "\u2588"
for row in canvas:
    print("".join(row))
