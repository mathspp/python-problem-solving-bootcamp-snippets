from functools import reduce
# from queue import LifoQueue  # <- no more LifoQueue needed!
from statistics import median

def from_base(digits, base=10):
    """Converts a list of (integer) digits in the given base to decimal."""
    return reduce(lambda l, r: l * base + r, digits, 0)

OPENING, CLOSING = "([{<", ")]}>"
CLOSE_WITH = dict(zip(OPENING, CLOSING))
SYNTAX_SCORES = dict(zip(CLOSING, [3, 57, 1197, 25137]))
CLOSING_SCORES = dict(zip(OPENING, range(1, 5)))

with open(INPUT_FILE, "r") as f:
    lines = f.readlines()

total_error_score = 0
completed_scores = []
for line in lines:
    stack = []
    for char in line:
        if char in OPENING:
            stack.append(char)
        elif char in CLOSING:
            op = stack.pop()
            if char != CLOSE_WITH[op]:
                total_error_score += SYNTAX_SCORES[char]
                break
    else:
        points = []
        for char in stack[::-1]:  # Iterate in the order of consecutive .pop()'s.
            points.append(CLOSING_SCORES[char])
        completed_scores.append(from_base(points, 5))

print(total_error_score)
print(median(completed_scores))
