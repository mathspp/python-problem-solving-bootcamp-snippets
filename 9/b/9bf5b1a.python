from itertools import product
from math import ceil, sqrt

with open(INPUT_FILE, "r") as f:
    data = f.readline().strip()

xdata, ydata = data.removeprefix("target area: ").split(", ")
(xmin, xmax), (ymin, ymax) = [map(int, cdata[2:].split("..")) for cdata in (xdata, ydata)]

# Process x velocities
xrange = range(ceil((-1 + sqrt(1 + 8 * xmin)) / 2), xmax + 1)
x_steps = {}
for vx in xrange:
    # Check if this is the special case:
    if xmin <= vx * (vx + 1) // 2 <= xmax:
        # Probe will stop going right inside the target, but check
        # if it was already _on_ the target in the previous steps.
        t, x, vx_ = vx, vx * (vx + 1) // 2, 1
        while xmin <= x:  # Walk left.
            x -= vx_
            vx_ += 1
            t -= 1
        x_steps[vx] = t + 1  # We took 1 step left too many.
        continue

    x, vx_, t, ts = 0, vx, 0, set()
    while x <= xmax:
        t += 1
        x += vx_
        vx_ = max(vx_ - 1, 0)
        if xmin <= x <= xmax:
            ts.add(t)
    # If this velocity hits the target, save _when_.
    if ts:
        x_steps[vx] = ts

# Process y velocities
yrange = range(ymin, abs(ymin) + 1)
y_steps = {}
for vy in yrange:
    y, vy_, t, ts = 0, vy, 0, set()
    while y >= ymin:
        t += 1
        y += vy_
        vy_ -= 1
        if ymin <= y <= ymax:
            ts.add(t)
    # If this velocity hits the target, save _when_.
    if ts:
        y_steps[vy] = ts

hits = 0
for (vx, xts), (vy, yts) in product(x_steps.items(), y_steps.items()):
    # Is this the x special case?
    if isinstance(xts, int):
        xts = set(range(xts, max(yts) + 1))  # Give x as many opportunities as y allows.
    if xts & yts:  # Check if x and y are on target at the same time, at all.
        hits += 1
print(hits)
