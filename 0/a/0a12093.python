def neighbouring_positions(matrix, r, c):
    return {
        (r_, c_) for r_, c_ in [(r - 1, c), (r, c - 1), (r + 1, c), (r, c + 1)]
        if 0 <= r_ < len(matrix) and 0 <= c_ < len(matrix[0])
    }

with open(INPUT_FILE, "r") as f:
    grid = [
        [int(num) for num in line.strip()]
        for line in f
    ]

to_consider = {(r, c) for r in range(len(grid[0])) for c in range(len(grid))}
risk = 0
while to_consider:
    r, c = to_consider.pop()
    val = grid[r][c]
    if val == 9:
        continue
    for r_, c_ in neighbouring_positions(grid, r, c):
        if val < grid[r_][c_]:
            to_consider.discard((r_, c_))  # Position r_, c_ can't be low point.
        else:
            break
    else:
        risk += val + 1
print(risk)
