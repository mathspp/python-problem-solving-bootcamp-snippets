from collections import Counter
from itertools import pairwise  # Python 3.10+

# A dictionary mapping pairs to new characters:
with open(INPUT_FILE, "r") as f:
    polymer = f.readline().strip()
    f.readline()  # Read the empty line.
    rules = dict(line.strip().split(" -> ") for line in f)

# Pair substition into the template polymer.
counts = Counter("".join(pair) for pair in pairwise(polymer))
for _ in range(40):
    new_counts = Counter()
    for pair, count in counts.items():
        new_char = rules[pair]
        new_counts[pair[0] + new_char] += count
        new_counts[new_char + pair[1]] += count
    counts = new_counts

# Count the elements based off of the occurrences of the pairs.
element_counts = Counter()
for pair, count in counts.items():
    element_counts[pair[0]] += count
    element_counts[pair[1]] += count

# Temporarily ignore the first and last elements of the polymer.
element_counts[polymer[0]] -= 1
element_counts[polymer[-1]] -= 1
# Adjust element counts because on duplication.
for pair in element_counts:
    element_counts[pair] //= 2
# Re-add first and last elements.
element_counts[polymer[0]] += 1
element_counts[polymer[-1]] += 1

# Count the most and least common letters.
print(max(element_counts.values()) - min(element_counts.values()))
