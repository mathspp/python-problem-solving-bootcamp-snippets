with open(INPUT_FILE, "r") as f:
    grid = [
        [int(num) for num in line.strip()]
        for line in f
    ]

def neighbouring_positions(matrix, r, c):
    return {
        (r_, c_) for r_, c_ in [(r - 1, c), (r, c - 1), (r + 1, c), (r, c + 1)]
        if 0 <= r_ < len(matrix) and 0 <= c_ < len(matrix[0])
    }

def find_basin(matrix, r, c, visited=None):
    if visited is None:
        visited = set()
    visited.add((r, c))

    for r_, c_ in neighbouring_positions(matrix, r, c):
        if matrix[r_][c_] == 9 or (r_, c_) in visited:
            continue
        visited = find_basin(matrix, r_, c_, visited)  # Recursive call
    return visited

low_points = []
for r, row in enumerate(grid):
    for c, val in enumerate(row):
        values = [grid[r][c] for r, c in neighbouring_positions(grid, r, c)]
        if min(values) > val:
            low_points.append((r, c))

lengths = []
for r, c in low_points:
    basin = find_basin(grid, r, c)
    lengths.append(len(basin))

prod = 1
for n in sorted(lengths)[-3:]:
    prod *= n
print(prod)
