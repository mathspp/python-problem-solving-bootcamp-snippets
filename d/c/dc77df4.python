def scanners_match(reference, other):
    ref_dists = build_sets_of_distances(reference)
    other_dists = build_sets_of_distances(other)

    # Build a map of the other points that match the reference points.
    mapping = {}
    for ref_idx, ref_p in enumerate(ref_dists):
        for other_idx, other_p in enumerate(other_dists):
            if len(other_p & ref_p) >= POINT_MATCH_THRESHOLD - 1:
                mapping[other[other_idx]] = reference[ref_idx]

    n = len(mapping.keys())
    # No match was possible.
    if not n:
        return False, None, None

    # Compute the centres of gravity for both scanners.
    ref_cog = sum((mapping.values()), Point(0, 0, 0)) / n
    oth_cog = sum((mapping.keys()), Point(0, 0, 0)) / n

    # Look for a pair of points for which it is easy to compute the rotation.
    for oth_p, ref_p in mapping.items():
        oth_p_ = oth_p - oth_cog
        ref_p_ = ref_p - ref_cog
        if len({abs(c) for c in oth_p_.coords()}) == 3:
            break
    else:
        raise RuntimeError("Algorithm not robust enough.")

    rot = find_rotation(ref_p_, oth_p_)
    return True, rot, ref_p - oth_p.rotate(rot)
