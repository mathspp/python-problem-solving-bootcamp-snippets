def neighbouring_positions(grid, coords):
    r, c = coords
    shifts = [
        (r + 1, c), (r + 1, c + 1), (r, c + 1), (r - 1, c + 1),
        (r - 1, c), (r - 1, c - 1), (r, c - 1), (r + 1, c - 1),
    ]
    return [coords_ for coords_ in shifts if coords_ in grid]

def flash(grid, coords):
    for neighbour in neighbouring_positions(grid, coords):
        if grid[neighbour] == 0:  # This octopus already flashed recently.
            continue

        grid[neighbour] = (grid[neighbour] + 1) % 10
        if grid[neighbour] == 0:
            flash(grid, neighbour)

with open(INPUT_FILE, "r") as f:
    grid = {
        (r, c): int(n)
        for r, line in enumerate(f) for c, n in enumerate(line.strip())
    }

flashes = 0
for _ in range(100):
    to_flash = []

    for coords in grid.keys():
        grid[coords] = (grid[coords] + 1) % 10
        if grid[coords] == 0:
            to_flash.append(coords)

    while to_flash:
        coords = to_flash.pop()
        flash(grid, coords)

    flashes += sum(energy_level == 0 for energy_level in grid.values())

print(flashes)
