from collections import Counter, defaultdict

graph = defaultdict(list)
with open(INPUT_FILE, "r") as f:
    for line in f:
        v1, v2 = line.strip().split("-")
        graph[v1].append(v2)
        graph[v2].append(v1)

for connections in graph.values():
    if "start" in connections:
        connections.remove("start")

def has_repeated_cave(path):
    caves = Counter([cave for cave in path if cave.islower()])
    return max(caves.values()) > 1
        
def dfs(graph, path):
    *_, last_visited = path
    if last_visited == "end":
        return 1

    can_repeat = not has_repeated_cave(path)
    return sum(
        dfs(graph, path + [neighb])
        for neighb in graph[last_visited]
        if neighb.isupper() or neighb not in path or can_repeat
    )

dfs(graph, ["start"])
