from itertools import chain
from queue import SimpleQueue
from time import time


def all_rotations(points):
    for rot in ROTATIONS:
        yield (rot, [point.rotate(rot) for point in points])


def scanners_match(ref_scanner, other_scanner):
    """Check if two scanners match and try to transform the 2nd into the 1st."""

    ref_diffs = build_list_of_differences(ref_scanner)
    for rot, rotated in all_rotations(other_scanner):
        rotated_diffs = build_list_of_differences(rotated)
        matched, ref_idx, other_idx = points_of_view_match(
            ref_diffs,
            rotated_diffs,
            POINT_MATCH_THRESHOLD,
        )
        if not matched:
            continue  # Try another rotation if no match was found.
        # Here, ref_scanner[ref_idx] and rotated[other_idx] match!
        vec = ref_scanner[ref_idx] - rotated[other_idx]  # Translation vector.
        return True, rot, vec
    return False, None, None


with open(INPUT_FILE, "r") as f:
    scanners = [
        list(map(Point.fromstring, scanner.splitlines()[1:]))  # Ignore header line.
        for scanner in f.read().split("\n\n")  # Split in scanner groups.
    ]


start = time()

references = SimpleQueue()
references.put(0)
done, to_connect = [0], list(range(1, len(scanners)))
transformations, connects_to = {}, {}
while to_connect:
    reference = references.get()
    for other_scanner in to_connect:
        matches, rot, vec = scanners_match(scanners[reference], scanners[other_scanner])
        if matches:
            transformations[other_scanner] = (rot, vec)
            connects_to[other_scanner] = reference
            references.put(other_scanner)
            done.append(other_scanner)
    to_connect = [other for other in to_connect if other not in done]
    print(f"Missing {len(to_connect)}.")

# Transform all scanners into 0's frame of reference.
frame_of_reference = {other: other for other in done}
for other in reversed(done):
    while frame_of_reference[other] != 0:
        rot, vec = transformations[frame_of_reference[other]]
        scanners[other] = [p.rotate(rot) + vec for p in scanners[other]]
        frame_of_reference[other] = connects_to[frame_of_reference[other]]

print(len(set(chain.from_iterable(scanners))))
print(f"Took {(time() - start) / 60:.2f} minutes.")
