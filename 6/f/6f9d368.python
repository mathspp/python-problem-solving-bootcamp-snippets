from itertools import product

def neighbouring_positions(grid, r, c):
    shifts = [
        (r + 1, c), (r + 1, c + 1), (r, c + 1), (r - 1, c + 1),
        (r - 1, c), (r - 1, c - 1), (r, c - 1), (r + 1, c - 1),
    ]
    return [
        (r_, c_) for r_, c_ in shifts
        if 0 <= r_ < len(grid) and 0 <= c_ < len(grid[0])
    ]

with open(INPUT_FILE, "r") as f:
    grid = [[int(n) for n in line.strip()] for line in f]

flashes = 0
for _ in range(100):
    to_flash = []

    for r, c in product(range(len(grid)), range(len(grid[0]))):  # <-
        grid[r][c] += 1
        if grid[r][c] == 10:
            flashes += 1
            to_flash.append((r, c))

    while to_flash:
        r, c = to_flash.pop()
        for r_, c_ in neighbouring_positions(grid, r, c):
            grid[r_][c_] += 1
            if grid[r_][c_] == 10:
                flashes += 1
                to_flash.append((r_, c_))

    for r, c in product(range(len(grid)), range(len(grid[0]))):  # <-
        if grid[r][c] >= 10:
            grid[r][c] = 0

print(flashes)
