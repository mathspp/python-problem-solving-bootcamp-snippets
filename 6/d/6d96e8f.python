from math import prod

with open(INPUT_FILE, "r") as f:
    grid = [
        [int(num) for num in line.strip()]
        for line in f
    ]

def neighbouring_positions(matrix, r, c):
    return {
        (r_, c_) for r_, c_ in [(r - 1, c), (r, c - 1), (r + 1, c), (r, c + 1)]
        if 0 <= r_ < len(matrix) and 0 <= c_ < len(matrix[0])
    }

def find_basin(matrix, r, c):
    to_visit, seen, basin = [(r, c)], {(r, c)}, []
    while to_visit:
        r_, c_ = to_visit.pop()
        if matrix[r_][c_] == 9:
            continue
        basin.append((r_, c_))
        neighbs = neighbouring_positions(matrix, r_, c_)
        to_visit.extend(neighbs - seen)
        seen.update(neighbs)
    return basin

lengths = []
# We mark with -1 points already in a basin.
for r, row in enumerate(grid):
    for c, val in enumerate(row):
        if val == -1 or val == 9:
            continue
        basin = find_basin(grid, r, c)
        for r_, c_ in basin:
            grid[r_][c_] = -1
        lengths.append(len(basin))

print(prod(sorted(lengths)[-3:]))
